// L65
// Saurav Hathi


_______________________________________________________________


import java.util.*;

import java.lang.*;

import java.io.*;

interface Cube {

    int Compute(int X);

}

class UserdefinedFunctionalInterface {
    public static void main(String args[]) {

        Scanner sc = new Scanner(System.in);
        System.out.print("Enter any number: ");
        int A = sc.nextInt();
        Cube C = (int X) -> X * X * X;
        System.out.println("Cube of value is " + C.Compute(A));
    }
}

____________________________________________________________________


import java.util.*;

import java.lang.*;

import java.io.*;

class FunctionalInterface {

    public static void main(String args[]) {

        new Thread(new Runnable() {

            @Override

            public void run() {

                System.out.println("Creation of new thread");

            }

        }).start();

    }

}


_____________________________________________________________



import java.util.*;

import java.lang.*;

import java.io.*;

class FunctionalInterfaceWithLambda {

    public static void main(String args[]) {

        new Thread(() -> {
            System.out.println("Creation of new thread");
        }).start();

    }

}


_____________________________________________________


import java.util.*;

import java.util.function.Predicate;

class PredicateInterface{
	
	public static void main(String args[]){

		List<String> Words = Arrays.asList("Ready","To","Visit","Coders","Den","CodeTantriks");
		
		Predicate<String> P = (s)->s.startsWith("C");
		
		for (String W:Words){
			
			if (P.test(W)){
				
				System.out.println(W);
				
			}
			
			
		}
		
		
	}
	
	
	
}


___________________________________________________________


import java.util.*;
import java.lang.*;
import java.io.*;

interface FuncInterface {
    void AbstractFunction(int A);

    default void GeneralFunction() {
        System.out.println("Welcome");

    }

}

class LambdaExpression {
    public static void main(String args[]) {

        FuncInterface fobj = (int A) -> System.out.println(10 + A);

        fobj.AbstractFunction(15);

    }

}


_______________________________________________________


import java.util.ArrayList;

class LambdaExpression {
    public static void main(String args[]) {

        ArrayList<Integer> ArrList = new ArrayList<Integer>();
        ArrList.add(100);
        ArrList.add(203);
        ArrList.add(300);
        ArrList.add(405);

        ArrList.forEach(n -> System.out.println(n));

        System.out.println("All even elements displayed");
        ArrList.forEach(n -> {
            if (n % 2 == 0)
                System.out.println(n);
        });

    }
}


_____________________________________________________________


// Complete below given code as per the problem statement
import java.util.ArrayList;
class LambdaExpression{
	public static void main(String args[]){
		ArrayList<Integer> ArrList = new ArrayList<Integer>();
		ArrList.add(120);
		ArrList.add(303);
		ArrList.add(308);
		ArrList.add(555);
		//Complete the code for displaying elements using lambda expression
		ArrList.forEach(n -> System.out.println(n));
		
		System.out.println("All odd elements displayed");
		  ArrList.forEach(n-> { if (n%2 != 0) System.out.println(n); });  
		  
		  // Complete the Lambda
		
	}
}


______________________________________________________________


public class Lambda2Arguments {

    interface Operation1 {
        int operation(int a, int b);

    }

    interface Operation2 {
        void Message(String message);

    }

    private int operate(int P, int Q, Operation1 Obj) {
        return Obj.operation(P, Q);

    }

    public static void main(String args[]) {

        Operation1 Add = (int x, int y) -> x + y;

        Operation1 Mult = (int x, int y) -> x * y;

        Lambda2Arguments Tobj = new Lambda2Arguments();

        System.out.println("Addition is " + Tobj.operate(600, 700, Add));

        System.out.println("Multiplication is " +
                Tobj.operate(60, 30, Mult));

        Operation2 Fobj = message -> System.out.println("CodeTantra " + message);
        Fobj.Message("Lets Code");

    }
}


________________________________________________________________
